# -*- coding: utf-8 -*-
"""Python_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jnUsTWWSFLDYifu4bmpKNq8Ap-LTAlp3

#Big Data
# Introducción a Python

## 1) Primer Paso

Este es un primer ejercicio de python
"""

a=1+1

a

print(a)

b="Big Data"

b

"""## Segundo paso!

Explorar un pandas data frame y sus tipos de datos
"""

# cargar librería Pandas

import pandas as pd

# crear data frame (no le presten atención por ahora...)
d_star_wars = pd.DataFrame({'personaje': ['Luke Skywaker', 'C-3PO', 'Darth Vader'], 'altura':[172, 167, 202]})

d_star_wars

# Tipos de datos de pandas data frame
d_star_wars.dtypes

# Tipo de estructura de dato: la lista
lista_personajes=['Luke Skywaker', 'C-3PO', 'Darth Vader']

lista_personajes

lista_altura=[172, 167, 202]

lista_altura

# Crear un pandas dataframe basado en 2 listas
dataframe_2l = pd.DataFrame({'personaje': lista_personajes,
                   'altura':lista_altura
                  })

dataframe_2l

"""## Tercer paso!

Filtrar datos en pandas. La lógica de la notación vectorial.
"""

d_star_wars

d_star_wars['personaje'] # devuelve un pandas series

# d_star_wars.iloc[indice de fila, indice de columna]
d_star_wars.iloc[:, 0] # los dos puntos simboliza los slides

# devuelve todo el registro 0
d_star_wars.iloc[0, :]

"""Esto los puede confundir..."""

d_star_wars.loc[:, 'personaje'] # es equivalente a: d_star_wars.iloc[:, 0]

#d_star_wars.iloc[:, 'personaje'] # error porque el 2do parámetro no es un entero

# índices para las columnas:
d_star_wars.columns

# índices de los registros
list(d_star_wars.index)

d_star_wars.loc[0, :] # es equivalente: d_star_wars.iloc[0, :] (porque el índice 0 es la posición y el nombre)

# acceder a 1 elemento
d_star_wars.loc[0, 'altura']

d_star_wars.loc[1, 'altura']

"""## Cuarto paso

Un poco mas de acceso y filtos de datos con condiciones

![](https://shanelynnwebsite-mid9n9g1q9y8tt.netdna-ssl.com/wp-content/uploads/2016/10/Pandas-selections-and-indexing-768x549.png)
"""

d_star_wars

d_star_wars.iloc[0:2, 0] #[indice de fila, indice de columna] 0:2 significa que queremos la fila desde la posición 0 a la 2

# en este caso, nos devuelve todo
d_star_wars.iloc[0:3, 0:2]

"""### Remplazar valores"""

# otra manera de filtrar vectorialmente
d_star_wars['personaje']=='Darth Vader'

# ¿Cómo le cambiamos la altura a Darth Vader?
v_flag = d_star_wars['personaje']=='Darth Vader'

# ¿Como remplazar un valor basado en una condición?
d_star_wars.loc[v_flag, 'altura']

d_star_wars.loc[v_flag, 'altura'] = 185

# chequeo
d_star_wars

# haciendo todo en la misma linea
d_star_wars.loc[ d_star_wars['personaje']=='Luke Skywaker', 'altura']=200

d_star_wars

"""## 2) Dominando los datos

Carga de archivos, exploración de un data frame
"""

# URL donde se encuentra el archivo CSV
url = 'https://raw.githubusercontent.com/fpineyro/homework-0/master/starwars.csv'

# Lee el CSV
d_star_wars = pd.read_csv(url)

# Muestra las primeras 5 filas para ver si efectivamente cargó bien lso datos
d_star_wars.head()

"""Cargamos los datos en una tabla"""

# Exploración con DataTable colab
from google.colab.data_table import DataTable

DataTable(d_star_wars)

# shape, nos muestra cuantas filas (87) y cuantas columnas tiene el dataframe (10)
d_star_wars.shape

# head / tail
d_star_wars.tail(87)

# funpymodeling / instalar nuevas librerías
!pip install funpymodeling



"""#Importamos la librería de funpymodeling para explorar los datos

"""

# status
from funpymodeling.exploratory import status

#Mostramos estadísticas del dataframe
status(d_star_wars)

d_star_wars=pd.read_csv(filepath_or_buffer="https://raw.githubusercontent.com/fpineyro/homework-0/master/starwars.csv", sep=',')
d_star_wars

"""## Nulos en pandas"""

d_star_wars.head()

# None ~ NaN

status(d_star_wars)

# obtener nulos de una columna
d_star_wars['hair_color'].isna()

# creamos un filtro para obtener los registros con valores nulos
d_star_wars[d_star_wars['hair_color'].isna()]

# el origen de los NaN
import numpy as np

a=pd.Series([1,2,3, np.NaN])

b=pd.Series([1,2,3, None])

a

b

"""### Remplazo de nulos

Variable categórica / object
"""

d_star_wars

values={'homeworld': 'nulo_home', 'species': 'nulo_species'}

d_star_wars.fillna(value=values)

# remplazo en el mismo data frame
d_star_wars.fillna(value=values, inplace=True)

d_star_wars

"""## Imputación de nulos para variables numéricas


"""

# Obtención del promedio de la altura, y luego imputamos una columna
d_star_wars['height'].mean()

d_star_wars['height']=d_star_wars['height'].fillna(d_star_wars['height'].mean())

d_star_wars

"""---

## Ejercicios!

Se asume que ya corrieron los ejercicios mostrados y exploraron un poco el ecosistema de google colab.

👉 **Es super importante** que los hagan para fijar lo que aprendieron. No se frusten si estan 20 minutos para crear una lista, es al principio!

<br>

1) Crear dos listas de 5 valores, uno númerico y otro con string, llamado lista1 y lista2, con los siguientes valores:

1,2,3,4,5

a,b,c,d,e


"""

#Ejercicio 1
lista1=[1,2,3,4,5]
lista2=['a','b','c','d','e']

"""2) Crear e imprimir en pantalla un pandas data frame llamado `d_test` basandose en las listas del punto 1). Nombres de las columnas: `columna_A` y `columna_B`"""

#Ejercicio 2
import pandas as pd
d_test=pd.DataFrame({'columna_A':lista1, 'columna_B':lista2})
d_test

"""3) Cargar los datos de heart disease con pandas en una variable llamada `d_hd`. Imprimir en pantalla.

URL: `https://raw.githubusercontent.com/fpineyro/homework-0/master/heart_disease.csv`


"""

#Ejercicio 3
url='https://raw.githubusercontent.com/fpineyro/homework-0/master/heart_disease.csv'
d_hd=pd.read_csv(url)
d_hd

#Ejercicio 3.1) Imprimir la variable `age` y `has_heart_disease` al mismo tiempo.
d_hd[['age', 'has_heart_disease']]

#Ejericio 3.2) Explorar los datos con DataTable de google colab, usar filtros y ordenar las columnas haciendo click en ellas
from google.colab.data_table import DataTable

DataTable(d_hd)

d_hd.shape

#Ejercicio 3.3) Imprimir los primeros 3 registros con head, y los últomos 3 con tail
from google.colab.data_table import DataTable

DataTable(d_hd)

d_hd.shape
d_hd.head(3)
d_hd.tail(3)

# head

#tail
from google.colab.data_table import DataTable

DataTable(d_hd)

d_hd.shape
d_hd.tail(3)

#Ejercicio 3.4) Acceder con loc a la columna has_heart_disease, y mostrar todos los registros
d_hd.loc[:, 'has_heart_disease']

#Ejercicio 3.5) Idem 3.4) peor mostrando los primeros 3 registros. Usar slice, no head.
from google.colab.data_table import DataTable

DataTable(d_hd)
sliced_column =d_hd['has_heart_disease'].iloc[3]
print(sliced_column)

#Ejercicio 3.6) Usar iloc para obtener las primeras 3 columnas, y 5 registros
from google.colab.data_table import DataTable

DataTable(d_hd)
d_hd.iloc[0:5, 0:3]

"""4) Trabajando con nulos

"""

# 4.1) Instalar funpymodeling
!pip install funpymodeling

# 4.2) Cargar función status
from funpymodeling.exploratory import status

#Ejercicio 4.3) ¿Qué variables tienen nulos?  (usar status)
# obtener nulos de una columna
from google.colab.data_table import DataTable

DataTable(d_hd)
d_hd.isna()

#Ejercicio 4.4) Devolver un data frame con todos los registros que tienen NaN en la variable "thal".
from google.colab.data_table import DataTable

DataTable(d_hd)
d_hd[d_hd['thal'].isna()]

#Ejercicio 4.5) Remplazar los nulos que aparecen en la variable "thal por 999. *No* guardarlo en el dataframe original. Usar fillnan.
from google.colab.data_table import DataTable

DataTable(d_hd)
d_hd.fillna(value=999)

#Ejercicio 4.6) Remplazar los nulos que aparecen en la variable "thal" por 999 (como antes),
# y también remplazar los nulos de "num_vessels_flour" por el promedio de la variable.
# Guardar el resultado en un dataframe nuevo llamado "d_hd2".
from google.colab.data_table import DataTable

DataTable(d_hd)
d_hd2=d_hd.fillna(value=999)
d_hd2.fillna(value=d_hd2['num_vessels_flour'].mean())

#Ejercicio 4.7) Chequear resultado con status
# status
from funpymodeling.exploratory import status
from google.colab.data_table import DataTable

DataTable(d_hd)
d_hd.status()

#Ejercicio 4.8)
# Eliminar todas los registros con nulos usando `dropna` de pandas
import pandas as pd

# Assuming d_hd is your DataFrame
# Dropping rows with any NaN values
d_hd_cleaned = d_hd.dropna()

# Display the cleaned DataFrame
print(d_hd_cleaned)